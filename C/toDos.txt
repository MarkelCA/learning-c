[X]........Made
[/]........In process / Not finished
[ ]........To do

1. C programming
---------------------------------
[X] Look for Size Integer (size_t)
[X] Find out why can't you pass arrays by value
[X] Find out what is null character and why appears in strings
[X] Char array vs Char pointer: https://www.geeksforgeeks.org/whats-difference-between-char-s-and-char-s-in-c/
[X] Dinamic memory allocaion with malloc: https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/
[X] Dinamic length array: https://www.geeksforgeeks.org/variable-length-arrays-in-c-and-c/ 
[X] Memory Layout of C Program: https://www.geeksforgeeks.org/memory-layout-of-c-program/
[X] Command line arguments validation and iteration
[X] Constructors in C
[/] Variable length string input 
[/] Data Structures: https://www.geeksforgeeks.org/data-structures/
[ ] Study memory management and deallocation

Resources:

1.1 GeeksForGeeks full C guide: https://www.geeksforgeeks.org/c-programming-language/?ref=ghm
1.2 Introduction: https://www.geeksforgeeks.org/c-language-set-1-introduction/
1.3 https://www.geeksforgeeks.org/c-programming-language-standard/
1.4 https://www.geeksforgeeks.org/int-1-sign-bit-31-data-bits-keyword-in-c/
1.5 C vs C++: https://www.tutorialspoint.com/difference-between-c-and-cplusplus#:~:text=As%20we%20know%20both%20C,and%20object%2Doriented%20programming%20languages.
1.6 https://www.youtube.com/watch?v=2HasEQe5VR0
1.7 Unknow length string input: https://stackoverflow.com/questions/16870485/how-can-i-read-an-input-string-of-unknown-length
1.8 Strings: https://www.programiz.com/c-programming/c-strings
1.9 All Operators: https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B


2. Fundamentals: Memory management in computer science
-----------------------------
[X] Code space vs data space
[X] Virtual memory vs Physical memory
[X] Fragmentation
[X] Stack vs Heap: https://www.guru99.com/stack-vs-heap.html, https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap
[/] Shared Libraries (Library computing)
[ ] Chunks: https://en.wikipedia.org/wiki/Chunking_(computing)#In_memory_management
[ ] System file formats
[ ] Program vs Proccess: https://en.wikipedia.org/wiki/Process_isolation, https://en.wikipedia.org/wiki/Process_(computing)
[ ] Memory segments: http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch10s04.html

Resources: 

2.1 https://en.wikipedia.org/wiki/Addressing_mode
2.2 https://en.wikipedia.org/wiki/Code_segment
2.3 https://en.wikipedia.org/wiki/Object_file
2.4 https://en.wikipedia.org/wiki/Offset_(computer_science)
2.5 https://en.wikipedia.org/wiki/Relocation_(computing)
2.6 https://en.wikipedia.org/wiki/Memory_address#absolute_address
2.7 https://en.wikipedia.org/wiki/Data_segment
2.8 https://www.geeksforgeeks.org/data-structures/

3. Data structures
-----------------------------
[X] Linked list
[X] Linked list append
[X] Linked list preppend
[X] Linked list (change head)
[X] Double Linkedlist
[ ] Linked list (remove by index)
[ ] Linked list (remove by value)

Resources:
3.1 Create and display a Linked List in C: https://www.youtube.com/watch?v=7Fz7JSvlr9g&t=45s
3.2 Singly and Doubly Linked lists implementation in C: https://www.youtube.com/watch?v=RCHGco2NvMk&t=272s
3.3 Modify contents of a Linked List: https://www.geeksforgeeks.org/modify-contents-linked-list/
3.4 Doubly linked list: https://www.geeksforgeeks.org/doubly-linked-list/
3.4 Double vs Single Linked List: https://www.tutorialspoint.com/difference-between-singly-linked-list-and-doubly-linked-list-in-java#:~:text=Both%20Singly%20linked%20list%20and,link%20to%20the%20previous%20node.
3.5 Find the middle of a Linked List: https://www.geeksforgeeks.org/write-a-c-function-to-print-the-middle-of-the-linked-list/?ref=leftbar-rightbar

4. Algorithms
-----------------------------
[X] Understand time complexity
[X] Quick sort
[/] Why is Quick sort faster than other alorithms if its time complexity is bigger - 4.1
[ ] Merge sort
[ ] Understand Space complexity


Resources: 
4.1 Why is better quicksort vs other algorithms: https://cs.stackexchange.com/questions/3/why-is-quicksort-better-than-other-sorting-algorithms-in-practice
4.2 Array sorting algorithms: https://www.toptal.com/developers/sorting-algorithms
4.3 Heapsort vs Quicksort: https://stackoverflow.com/questions/2467751/quicksort-vs-heapsort/14441803
4.4 Analysis of algorithms: https://www.geeksforgeeks.org/analysis-of-algorithems-little-o-and-little-omega-notations/
4.5 Time complexity comparison cheat list: https://www.bigocheatsheet.com/
4.6 Time complexity explanation: https://www.studytonight.com/data-structures/time-complexity-of-algorithms
4.7 Rotation of arrays (Index): https://www.geeksforgeeks.org/array-data-structure/#rotation
4.8 Rotation of arays: https://www.geeksforgeeks.org/array-rotation/
4.9 Quick sort: https://www.studytonight.com/data-structures/quick-sort
4.10 Tipes of notation: https://beginnersbook.com/2018/10/ds-asymptotic-notation/
4.11 Graphic reresentation of equations: https://www.geogebra.org/graphing?lang=es
